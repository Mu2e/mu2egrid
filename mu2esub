#!/usr/bin/perl -w
#
# A frontend script to submit mu2e framework jobs to Fermilab grid.
#
# A.Gaponenko, 2012
#
use File::Basename;
use Getopt::Long;
use Cwd 'abs_path';
use POSIX qw(ceil);

my $jobsub = 'jobsub';
#my $jobsub = 'jobsub-andr';
my $workerscript = abs_path(dirname($0) . '/impl/mu2eworker.sh');
my @knownOutstage = ('/mu2e/data/outstage', '/grid/data/mu2e/outstage');

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage: 
	$self --setup=<script-to-source.sh> \\
	      --fcl=<file> --jobname=<name> \\
	      --outstage=<dir> \\
	      --njobs=<M> \\
	  {--inputs=<filelist>|--events-per-job=<N> [--run-number=<R>]} \
	  [--mu2e-setup=<setupmu2e-art.sh>] \
	  [--dry-run]

Notes:

    - The --setup argument must point to the setup.sh script in a user
      Offline area.  The --mu2e-setup arg is optional, by default
      the current official mu2e release is used.

    - the jobname argument defines the name of the top level output directory.

    - outstage should be one of the following registered locations: 

           @knownOutstage

    - Once grid jobs are sumbitted the software libraries pointed to
      by the setup script, all configuration files, and the input
      filelist must be left intact until all the jobs finish.  

EOF
;
}


#================================================================
sub assert_files_exist {
    foreach my $f (@_) {
	die "Error: file \"$f\" does not exist\n"
	    unless -r $f;
    }
}


#================================================================
sub find_file($) {
    my $fn = shift;
    my $res = abs_path($fn);
    die "Error: file \"$fn\" does not exist\n" unless defined $res;
    return $res;
}

#================================================================
sub assert_known_outstage($) {
    my $d = shift;
    foreach my $o (@knownOutstage) {
	$o eq $d and return 1;
    }
    die "The specified outstage \"$d\" is not recognized - is this a typo?  Known location: @knownOutstage\n";
}

#================================================================
my %opt = ('mu2e-setup' => '/grid/fermiapp/products/mu2e/setupmu2e-art.sh',
	   help => 0, verbose => 0, 'dry-run' => 0);


# Process command line opts.
GetOptions(\%opt, 
	   "help",
	   "verbose",
	   "setup=s",
	   "mu2e-setup=s",
	   "fcl=s",
	   "jobname=s",
	   "outstage=s",
	   "njobs=i",
	   "inputs=s",
	   "events-per-job=i",
	   "run-number=i",
	   "dry-run",
	   ) 
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

# Check that all of the required args are present:
foreach my $k ('setup', 'mu2e-setup', 'fcl', 'jobname', 'outstage', 'njobs') {
    defined $opt{$k} or die "Error: --$k must be specified.  Try the --help option.\n";
}

# All file args are to be passed using full path names.
my $setup = find_file($opt{'setup'});
my $mu2esetup = find_file($opt{'mu2e-setup'});
my $fcl = find_file($opt{'fcl'});
my $outstage = find_file($opt{'outstage'});

assert_known_outstage($outstage);

my $njobs = $opt{'njobs'};

$ENV{'MU2EGRID_USERSETUP'} = $setup;
$ENV{'MU2EGRID_MU2ESETUP'} = $mu2esetup;
$ENV{'MU2EGRID_MASTERFHICL'} = $fcl;
$ENV{'MU2EGRID_JOBNAME'} = $opt{'jobname'};
$ENV{'MU2EGRID_OUTSTAGE'} = $outstage;

my $whoami = `whoami`;
chomp($whoami);
$ENV{'MU2EGRID_SUBMITTER'} = $whoami;

# Either --inputs or --events-per-job is required.   The --run-number option is only combinable with the latter.
if(defined $opt{'inputs'}) {
    if(defined($opt{'events-per-job'})) {
	die "Arguments --inputs and --events-per-job are mutually exclusive.";
    }

    if(defined($opt{'run-number'})) {
	die "Arguments --inputs and --run-number are mutually exclusive.";
    }

    my $inputs = find_file($opt{'inputs'});

    $ENV{'MU2EGRID_INPUTLIST'} = $inputs;
    my $nlines =  `cat $inputs | wc -l`;
    chomp($nlines);
    print "nlines = $nlines in file $inputs\n" if $opt{'verbose'};

    if($nlines < $njobs) {
	die "Error too many requested jobs = $njobs.  The input file list has only $nlines lines: $inputs\n";
    }
    $ENV{'MU2EGRID_CHUNKSIZE'} = ceil($nlines/$njobs);

}
else {
    if(!defined($opt{'events-per-job'})) {
	die "Either --inputs or --events-per-job must be specified.";
    }

    $ENV{'MU2EGRID_EVENTS_PER_JOB'} = $opt{'events-per-job'};

    if(defined($opt{'run-number'})) {
	$ENV{'MU2EGRID_RUN_NUMBER'} = $opt{'run-number'};
    }
}

my @args = ('-g', '-Q', '-opportunistic', '-N', $njobs );
while( (my $key, my $value) = each(%ENV) ) {
    if($key =~ m/^MU2EGRID_\w+$/) {
	#print "Using env $key => $value\n";
	push @args,  ('-e', $key);
	print "Using: $key => $ENV{$key}\n" if $opt{'verbose'};
    }
}

push @args, $workerscript;

print "Command:  $jobsub @args\n";
if(!$opt{'dry-run'}) {
    print "Submitting....\n";
    exec { $jobsub } $jobsub, @args
	or die "Error executing $jobsub: $!";
}

#================================================================
