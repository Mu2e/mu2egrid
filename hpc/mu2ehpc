#!/usr/bin/perl -w
#
# A frontend script to submit mu2e framework jobs in the HPC environment

use File::Basename;
use File::Path;
use File::Temp;
use Getopt::Long;
use MIME::Base64;

my $scriptCopyName = 'dump.sh';

my %opt =
    (
     'dsowner' => 'mu2e',
     'setup' => '/Offline/setup.sh',
     'mu2e-setup' => '/setupmu2e-art.sh',
     'help' => 0
    );

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self --fcllist=<fcl-file-list> \\
              --dsconf=<output-dataset-version-string> \\
              [--dsowner=<name>] \\
              --topdir=<directory> \\
              --container=<file> \\
              --sbopts=<file> \\
              --ntasks-per-node=<integer> \\
              [--dry-run] \\
              [--mu2e-setup=<inside-the-container-file>] \\
              [--setup=<inside-the-container-file>]

    where square brackets denote optional parameters.

    - The set of fcl files specified via --fcllist will be processed
      by Mu2e Offline, one fcl file per job.  The --fcllist argument
      should be a plain text file with one fcl file name per line.
      The submission process will take a snapshot of the content of
      fcl files, and later modifications to the files (or fcllist
      itself) will not affect any previously submitted jobs.

    - The configuration field in the names of output files should be
      specified via --dsconf.

    - The --dsowner option specifies the username field in the names
      of output files.  The default is the 'mu2e'

    --topdir will have subdirectories created where the jobs will
      run and place their outputs.

    --container is the Mu2e container to be used for the job

    --sbopts should point to a text file that will be merged in a the
       beginning of the submitted batch script.  Each line must start
       with '#SBATCH' and define an option for the batch job.  The
       --nnodes and --ntasks-per-node parameters are given on the
       sbatch command line and should not be duplicated in --sbopts.

    --ntasks-per-node is passed to sbatch.  The corresponding --nodes
      request is deduced from --ntasks-per-node and the number of jobs
      in the --fcllist.

    --dry-run will cause a batch script to be prepared, but not submitted.
      Note that a copy of the batch script is always dumped to '$scriptCopyName'
      and available for inspection.

    --mu2e-setup defaults to $opt{'mu2e-setup'}, to be sourced by
      the inside-the-container working processes.

    --setup defaults to $opt{'setup'}, another file to be sourced by
      the inside-the-container working processes.

EOF
;
}

#================================================================
# generates a reasonably unuque name for the "submission level" directory
sub makeSubDirName {
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
    $year = sprintf("%02d", $year+1900);
    $mon = sprintf("%02d", $mon+1);
    $mday = sprintf("%02d", $mday);
    $hour = sprintf("%02d", $hour);
    $min = sprintf("%02d", $min);
    $sec = sprintf("%02d", $sec);

    my $sd = "${year}${mon}${mday}-${hour}${min}";
    return $sd;
}

#================================================================
sub checkFilenameComponent {
    my ($opt, $list) = @_;
    foreach my $a (@$list) {
        die "Error: parameter $a must be specified\n" unless defined $$opt{$a};
        my $val = $$opt{$a};
        die "Invalid value of parameter $a = '$val'"
            unless $val =~ /^\w[-\w]*$/;
    }
}

#================================================================
sub interpret_fcl_input {
    my ($fclin) = @_;

    my ($njobs, $fcllist, $fcltar);

    $fcllist = $fclin;
    $njobs = mu2egrid::validate_file_list($fcllist);
    $fcltar = '';

    return ($njobs, $fcllist, $fcltar);
}

#================================================================
# Process command line opts.
GetOptions(\%opt,
           'mu2e-setup=s',
           'setup=s',
           'fcllist=s',
           'dsconf=s',
           'dsowner=s',
           'topdir=s',
           'container=s',
           'sbopts=s',
           'ntasks-per-node=i',
           'help',
           'dry-run'
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
exit 0;
}

# Check that all of the required args are present:
foreach my $k ('fcllist', 'dsconf', 'topdir', 'container', 'sbopts', 'ntasks-per-node') {
    defined $opt{$k} or die "Error: --$k must be specified.  Try the --help option.\n";
}

my $container = $opt{'container'};
die "Error: can not read the container file $container" unless -r $container;

# Make sure components of Mu2e filenames are valid
checkFilenameComponent(\%opt, ['dsconf', 'dsowner']);

#----------------
# Create a new "submission level" dir to make sure individual jobdirs
# do not clash with anything pre-existing.

my $clusterdir = $opt{'topdir'} . '/' . makeSubDirName();
if(!$opt{'dry-run'}) {
    my $nnew = File::Path::make_path( $clusterdir, { verbose=>1 } ); # this Carps on errors
    die "Error: failed to create a new directory $clusterdir - did it already exist?\n" unless $nnew;
}

#----------------------------------------------------------------
my $script = "#!/bin/bash\n";

my $sbopts = $opt{'sbopts'};
open(my $sbin, $sbopts) or die "Error opening $sbopts: $!\n";
while(my $line = <$sbin>) {
    die "Error: invalid --sbopts line:\n$line\n"
        unless $line =~ /^#SBATCH/;

    # FIXME: add more checks to ban --ntasks-per-node,
    # --nodes, and other similar settings here

    $script .= $line;
}
close $sbin;

#----------------------------------------------------------------
# Environment for the worker process
my $env = ""
    . "MU2EGRID_HPC=1 "
    . "MU2EGRID_ERRORDELAY=1 "
    . "MU2EGRID_DSOWNER=$opt{'dsowner'} "
    . "MU2EGRID_DSCONF=$opt{'dsconf'} "
    . "MU2EGRID_MU2ESETUP=$opt{'mu2e-setup'} "
    . "MU2EGRID_USERSETUP=$opt{'setup'} "
    . "MU2EGRID_INPUTLIST=masterlist "
    . "MU2EGRID_FCLTAR=fcl.tar.bz2 "
    . "TMPDIR=/mnt "
    . "CONDIR_DIR_INPUT=/mnt "
    . "PROCESS=\$SLURM_PROCID "
    ;

#----------------------------------------------------------------
# The outside-of-container worker node script code.
#
# NB: SLURM_PROCID must be escaped here to be expanded by the worker
# node process instead of the submission script, but we do need
# to expand $clusterdir

$script .= <<"EOF"

set -e  # immediate exit on an error
JOBDIR=\"$clusterdir/\$(printf %02d \$((\$SLURM_PROCID/1000)))/\$(printf %05d \$SLURM_PROCID)\"
mkdir -p \$JOBDIR

# Extract the --fcllist
sed -e '1,/^BEGIN_MASTERLIST/d' -e '/^BEGIN_DATA/,\$d' \$0 > \$JOBDIR/masterlist

# Extract the fcl files archive
sed -e '1,/^BEGIN_DATA/d' \$0 | base64 -d > \$JOBDIR/fcl.tar.bz2

module load singularity --latest
srun singularity exec -B \$JOBDIR:/mnt $container bash -c \"$env /mu2egrid/bin/impl/mu2eprodsys.sh\"
exit \$?

BEGIN_MASTERLIST
EOF
    ;

#----------------------------------------------------------------
print "The script to be submitted (embedded data not shown):\n";
print $script;

#----------------------------------------------------------------
my $nfclfiles = 0;
my $fcllist = $opt{'fcllist'};
open(my $fclin, $fcllist) or die "Error opening $fcllist: $!\n";
while(my $line = <$fclin>) {
    chomp $line;
    -l $line && die "Error: fcl input $line is a symlink. Must be a plain file.\n";
    -f $line || die "Error: fcl input $line is not a plain file\n";
    -r $line || die "Error: fcl file $line is not readable\n";
    $script .= $line;
    $script .= "\n";
    ++$nfclfiles;
}
close $fclin;

#----------------------------------------------------------------
# tar up the fcl files and embed them in the batch script
$script .= "BEGIN_DATA\n";
open my $tarstream, '-|', 'tar', '--create', '--bzip2', '--file=-', "--files-from=$fcllist"
    or die "Can not execute tar: $!\n";

# Use a multiple of 57 bytes to avoid base64 padding in the middle.
while (read($tarstream, my $tmp, 60*57)) {
    $script .= encode_base64($tmp);
}

close $tarstream;

#----------------------------------------------------------------
# debug
if(open(my $sout, '>', $scriptCopyName)) {
    print $sout $script;
}
else {
    warn "Warning: could not write a copy of the batch script to '$scriptCopyName': $!\n";
}

#----------------------------------------------------------------
my $tpn = $opt{'ntasks-per-node'};
die "--ntasks-per-node must be a positive integer.  Got: $tpn\n" unless $tpn > 0;

die "The number of fcl files $nfclfiles is not a multiple of --ntasks-per-node $tpn\n"
    if ($nfclfiles % $tpn);

my $nnodes = $nfclfiles / $tpn;

print "\n# Job size:  $nnodes nodes at $tpn tasks per node\n";

#----------------
if(!$opt{'dry-run'}) {
    print "# Submitting....\n";
    ## Actually, print to a pipe here
    #exec { 'sbatch' } 'sbatch', @args
    open my $sbstream, '|-', 'sbatch', "--ntasks-per-node=$tpn", "--nodes=$nnodes"
        or die "Error starting sbatch: $!";
    print $sbstream $script;
    close $sbstream or die "Error from sbatch\n";
}
else {
    print "# Not submitting because --dry-run was requested.\n";
}
#================================================================
