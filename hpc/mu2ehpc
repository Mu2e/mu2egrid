#!/usr/bin/perl -w
#
# A frontend script to submit mu2e framework jobs in the HPC environment

use File::Basename;
use File::Path;
use File::Temp;
use File::Copy;
use Getopt::Long;

# Items that differ between different HPC clusters
use Class::Struct Mu2eHPCBatchSys => [
    batchcmd => '$',
    batchargs => '$',
    batchoptheader => '$',
    scriplet => '$',
    ];

# For info passing within our script
use Class::Struct JobPars => [
    nfclfiles=>'*$',
    numnodes=>'*$',
    procsPerNode=>'*$',
    threadsPerProcess=>'*$',
    timeLimit=>'*$',
    extraOptions=>'*@',
    sldir=>'*$',
    mu2egridDir=>'*$',
    container=>'*$',
    env=>'*$',
    scriptName=>'*$',
    ];

# expects JobPars arg
my $thetascriplet = sub {
    my $a = shift;
    return <<"EOF"
        aprun  -n ${$a->nfclfiles} -N ${$a->procsPerNode} -cc depth -d ${$a->threadsPerProcess} -j 4 \\
        singularity exec @{$a->extraOptions} -B ${$a->sldir}:/mnt ${$a->container} \\
        bash -c \"${$a->env} /mu2egrid/bin/impl/mu2eprodsys.sh\"

EOF
    ;
};

# expects JobPars arg
my $bebopscriplet = sub {
    my $a = shift;
    return <<"EOF"
        srun singularity exec @{$a->extraOptions} -B ${$a->sldir}:/mnt ${$a->container} bash -c \"${$a->env} ${$a->mu2egridDir}/bin/impl/mu2eprodsys.sh\"

EOF
    ;
};

my %clusters = ( 'theta' => Mu2eHPCBatchSys->new( batchcmd => 'qsub',
    batchargs => sub { my $a = shift; return ( '--mode', 'script',
    '-n', ${$a->numnodes}, '-t', ${$a->timeLimit}, ${$a->scriptName}
    ); }, batchoptheader => '^#COBALT', scriplet => $thetascriplet, ),

    'bebop' => Mu2eHPCBatchSys->new(
        batchcmd => 'sbatch',
        batchargs => sub {
            my $a = shift;
            return (
                '--nodes', ${$a->numnodes},
                '--ntasks-per-node', ${$a->procsPerNode},
                '--time', ${$a->timeLimit},
                ${$a->scriptName}
                );
        },
        batchoptheader => '^#SBATCH',
        scriplet => $bebopscriplet,
        ),
);

#================================================================
# The defaults

my %opt =
    (
     'dsowner' => 'mu2e',
     'setup' => '/Offline/setup.sh',
     'mu2e-setup' => '/setupmu2e-art.sh',
     'extra-option' => [],
     'help' => 0,
     'debug' => 0,
    );

#================================================================
sub shortUsage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self --cluster=<name> \\
              --fcllist=<fcl-file-list> \\
              --dsconf=<output-dataset-version-string> \\
              [--dsowner=<name>] \\
              [--extra-option=<string> [--extra-option=<string> ...]] \\
              --topdir=<directory> \\
              --mu2egrid-dir=<name> \\
              --container=<file> \\
              --batchopts=<file> \\
              --nthreads-per-process=<integer> \\
              --nprocs-per-node=<integer> \\
              --time-limit=<string> \\
              [-h|--help] \\
              [--dry-run] \\
              [--debug] \\
              [--mu2e-setup=<inside-the-container-file>] \\
              [--setup=<inside-the-container-file>]

EOF
    ;
}

sub usage() {
    my $clusterNames = join(', ', keys(%clusters));

    return shortUsage() . <<EOF
    where square brackets denote optional parameters.

    --cluster is one of $clusterNames

    - The set of fcl files specified via --fcllist will be processed
      by Mu2e Offline, one fcl file per job.  The --fcllist argument
      should be a plain text file with one fcl file name per line.
      The submission process will take a snapshot of the content of
      fcl files, and later modifications to the files (or fcllist
      itself) will not affect any previously submitted jobs.

    - The configuration field in the names of output files should be
      specified via --dsconf.

    - The --dsowner option specifies the username field in the names
      of output files.  The default is the 'mu2e'

    --topdir specifies where to create a new directory structure to
      place inputs and receive outputs of the jobs.

    --extra-option accepts an extra argument for the singularity container
      For instance, it can be used to mount an additional locaiton as:
      --extra-option=-B/lcrc/project/mu2e_CRY_1/200605/:/pnfs/mu2e/tape/phy-sim/sim/mu2e/filtered-s1/200605/
      More than one additional argument can be provided by
      using --extra-option several times.

    --mu2egrid-dir specify mu2egrid version inside the container
      to be used.

    --container is the Mu2e container to be used for the job

    --batchopts should point to a text file that will be merged in a
      the beginning of the submitted batch script.  Each line must
      start with '#SBATCH' for Bebop or '#COBALT' for Theta, and
      define an option for the batch submission.

    --nthreads-per-process is the number of threads used by an individual
      Mu2e job to process a single fcl file in the submission.

    --nprocs-per-node must be provided.  The number of nodes request
      is deduced from --nprocs-per-node and the number of jobs in
      --fcllist.

    --time-limit is the maximal job duration.

    -h or --help: print out the documentation.

    --dry-run will run pre-submission job checks and print out
      the script, but not submit it.

    --debug requests a more verbose logging by the worker node script

    --mu2e-setup defaults to $opt{'mu2e-setup'}, to be sourced by
      the inside-the-container working processes.

    --setup defaults to $opt{'setup'}, another file to be sourced by
      the inside-the-container working processes.

EOF
;
}

#================================================================
# generates a reasonably unuque name for the "submission level" directory
sub makeSubDirName {
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
    $year = sprintf("%02d", $year+1900);
    $mon = sprintf("%02d", $mon+1);
    $mday = sprintf("%02d", $mday);
    $hour = sprintf("%02d", $hour);
    $min = sprintf("%02d", $min);
    $sec = sprintf("%02d", $sec);

    my $sd = "${year}${mon}${mday}-${hour}${min}${sec}";
    return $sd;
}

#================================================================
sub checkFilenameComponent {
    my ($opt, $list) = @_;
    foreach my $a (@$list) {
        die "Error: parameter $a must be specified\n" unless defined $$opt{$a};
        my $val = $$opt{$a};
        die "Invalid value of parameter $a = '$val'"
            unless $val =~ /^\w[-\w]*$/;
    }
}

#================================================================
if ($#ARGV == -1) {
    print shortUsage();
    exit(1);
}

# Process command line opts.
GetOptions(\%opt,
           'cluster=s',
           'fcllist=s',
           'dsconf=s',
           'dsowner=s',
           'extra-option=s',
           'topdir=s',
           'mu2egrid-dir=s',
           'container=s',
           'batchopts=s',
           'nprocs-per-node=i',
           'nthreads-per-process=i',
           'time-limit=s',
           'help',
           'dry-run',
           'debug',
           'mu2e-setup=s',
           'setup=s',
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
exit 0;
}

# Check that all of the required args are present:
foreach my $k ('cluster', 'fcllist', 'dsconf',
               'topdir', 'mu2egrid-dir', 'container', 'batchopts',
               'nprocs-per-node', 'nthreads-per-process', 'time-limit')
{
    defined $opt{$k} or die "Error: --$k must be specified.  Try the --help option.\n";
}

my $clname = $opt{'cluster'};
grep { /^$clname$/ } keys %clusters
    or die "Error: unknown cluster $clname\n";
my $cl = $clusters{$clname};

my $tpn = $opt{'nprocs-per-node'};
die "--nprocs-per-node must be a positive integer.  Got: $tpn\n" unless $tpn > 0;

die "--nthreads-per-process must be a positive integer.  Got: $opt{'nthreads-per-process'}\n" unless $opt{'nthreads-per-process'} > 0;

my $container = $opt{'container'};
die "Error: can not read the container file $container" unless -r $container;

# Make sure components of Mu2e filenames are valid
checkFilenameComponent(\%opt, ['dsconf', 'dsowner']);

# Use a new "submission level" directory for each job to make sure
# outputs of individual jobs do not clash with anything pre-existing.
my $clustername = makeSubDirName();
my $sldir = $opt{'topdir'};
my $inputdir=$sldir . "/$clustername" . '/inputs';
my $fclmtbase = 'mtfragment.fcl';
my $fclmtname = $inputdir . '/' . $fclmtbase;

#----------------------------------------------------------------
# Count input fcl files
my $nfclfiles = 0;
my $fcllist = $opt{'fcllist'};
open(my $fclin, $fcllist) or die "Error opening $fcllist: $!\n";
while(my $line = <$fclin>) {
    chomp $line;
    -l $line && die "Error: fcl input $line is a symlink. Must be a plain file.\n";
    -f $line || die "Error: fcl input $line is not a plain file\n";
    -r $line || die "Error: fcl file $line is not readable\n";
    ++$nfclfiles;
}
close $fclin;

#----------------------------------------------------------------
die "The number of fcl files $nfclfiles is not a multiple of --nprocs-per-node $tpn\n"
    if ($nfclfiles % $tpn);

my $numnodes = $nfclfiles / $tpn;

print "\n# Job size:  $numnodes nodes at $tpn procs per node\n";

#----------------------------------------------------------------
my $scriptName = $inputdir . '/job.sh';

# The outside-of-container worker node script code.
my $script = "#!/bin/bash\n";

my $batchopts = $opt{'batchopts'};
open(my $sbin, $batchopts) or die "Error opening $batchopts: $!\n";
while(my $line = <$sbin>) {
    die "Error: invalid --batchopts line:\n$line\n"
        unless $line =~ $cl->batchoptheader;

    $script .= $line;
}
close $sbin;

#----------------------------------------------------------------
# Environment for the worker process
my $env = ""
    . "MU2EGRID_DIR=$opt{'mu2egrid-dir'} "
    . "MU2EGRID_HPC=1 "
    . "MU2EGRID_NO_PRESTAGE=0 "
    . "MU2EGRID_DEBUG=$opt{'debug'} "
    . "MU2EGRID_ERRORDELAY=1 "
    . "MU2EGRID_DSOWNER=$opt{'dsowner'} "
    . "MU2EGRID_DSCONF=$opt{'dsconf'} "
    . "MU2EGRID_MU2ESETUP=$opt{'mu2e-setup'} "
    . "MU2EGRID_USERSETUP=$opt{'setup'} "
    . "MU2EGRID_INPUTLIST=masterlist "
    . "MU2EGRID_FCLTAR=/mnt/$clustername/inputs/fcl.tar.bz2 "
    . "MU2EGRID_FCLMT=/mnt/$clustername/inputs/$fclmtbase "
    . "TMPDIR=/mnt/$clustername "
    . "CONDOR_DIR_INPUT=/mnt/$clustername/inputs "
    . "MU2EGRID_WFOUTSTAGE=/mnt "
    . "MU2EGRID_CLUSTERNAME=out.$clustername "
    ;

#----------------------------------------------------------------
my $jp = JobPars->new(
    nfclfiles=>$nfclfiles,
    numnodes=>$numnodes,
    procsPerNode=>$tpn,
    threadsPerProcess=>$opt{'nthreads-per-process'},
    timeLimit=>$opt{'time-limit'},
    extraOptions=>$opt{'extra-option'},
    sldir=>$sldir,
    mu2egridDir=>$opt{'mu2egrid-dir'},
    container=>$container,
    env=>$env,
    scriptName=>$scriptName,
    );

$script .= &{$cl->scriplet}($jp);

#----------------------------------------------------------------
# create files for this job submission

if(!$opt{'dry-run'}) {

    if(!$opt{'dry-run'}) {
        my $nnew = File::Path::make_path( $inputdir, { verbose=>1 } ); # this Carps on errors
        die "Error: failed to create a new directory $inputdir - did it already exist?\n" unless $nnew;
    }

    my $masterlist = $inputdir . '/masterlist';
    copy($fcllist, $masterlist)
        or die "Error copying $fcllist to $inputdir/masterlist: $!\n";
    chmod(0444, $masterlist);

    # tar up the fcl files
    my $fcltar = "$inputdir/fcl.tar.bz2";
    my @tarcmd = ("tar",
                  "--create",
                  "--absolute-names",
                  "--bzip2",
                  "--file=$inputdir/fcl.tar.bz2",
                  "--files-from=$fcllist");
    system(@tarcmd) == 0
        or die "Error: @tarcmd failed: $?";
    chmod(0444, $fcltar);

    open(my $sout, '>', $scriptName) or die "Error: can not create '$scriptName': $!\n";
    print $sout $script or die  "Error: can not write to '$scriptName': $!\n";
    close $sout or die "Error closing '$scriptName': $!\n";
    chmod(0555, $scriptName);

    open(my $frag, '>', $fclmtname) or die "Error: can not create '$fclmtname': $!\n";
    print $frag <<"EOF"

services.scheduler.num_schedules: $opt{'nthreads-per-process'}
services.scheduler.num_threads: $opt{'nthreads-per-process'}

EOF
    ;
    close $frag or die "Error closing '$fclmtname': $!\n";
    chmod(0444, $fclmtname);
}

#----------------------------------------------------------------
print "The script to be submitted:\n";
print $script;

my $cmdname = $cl->batchcmd;
my @args = &{$cl->batchargs}($jp);

#----------------
if(!$opt{'dry-run'}) {
    print "# Executing $cmdname @args\n";
    exec { $cmdname } $cmdname, @args
        or die "Error: $!\n";
}
else {
    print "# Submission command: $cmdname @args\n";
    print "# Not submitting because --dry-run was requested.\n";
}
#================================================================
