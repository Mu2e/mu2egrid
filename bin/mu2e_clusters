#!/usr/bin/perl -w
#
# A simple wrapper for jobsub_q to figure out what job clusters are still in the queue.
#
# A.Gaponenko, 2012, 2015
#
use strict;
use Getopt::Long;
use File::Basename;

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:

        $self [--brief] [--user=username]

will display a list of all active condor clusters for the user and job
count in each cluster.  If the '--brief' options is given, just cluster
IDs are printed.

EOF
;
}

#================================================================
sub getUserClusters($) {
    my $username = shift;

    open OLDERR,     ">&", \*STDERR or die "Can't dup STDERR: $!\n";
    open STDERR, '>', '/dev/null' or die "Can't redirect STDERR: $!\n";
    my $ret = open(my $CQ, '-|', 'jobsub_q', '--user', $username);
    my $savedmsg = $!;
    open STDERR,     ">&", \*OLDERR or die "Can't restor STDERR: $!\n";
    die "Error opening jobsub_q pipe: $savedmsg\n" unless $ret;

    my %clusters;

    while(my $line = <$CQ>) {
        chomp($line);
        my @fields = split(' ', $line);
#       print "got username = $username, fields = ". join('#', @fields) . "\n";
        if(($#fields > 5) && ($fields[1] eq $username)) {
            my $cn = $fields[0];
            $cn =~ s/\..*$//;
            my $cserver = $fields[0];
            $cserver =~ s/^.*@//;

            if(!defined($clusters{$cn})) {
                $clusters{$cn} = [0,0, $cserver];
            }

            # total job count
            ++$clusters{$cn}[0];
            # running jobs count
            if($fields[5] eq 'R') {
                ++$clusters{$cn}[1];
            }
        }
    }

    close $CQ
        or die "Error when running jobsub_q.  Exit code ", $?>>8, ", signal ", 0xFF&$? ,".\n";

    return \%clusters;
}

#================================================================
my $user = `whoami`;
chomp $user;
my %opt = (help => 0, brief => 0, user => \$user );
GetOptions(\%opt, "help", "brief", "user=s") or die "\nError processing command line options.\n";

if($opt{'help'} or ($#ARGV >= 0)) {
    print usage();
}
else {
    my $brief = $opt{'brief'};

    my $clusters = getUserClusters($user);

    if(!$brief) {
        print "Cluster  \t\t\t\tnjobs\trunning\n";
    }

    foreach my $cn (sort(keys %$clusters)) {
        if($brief) {
            print "$cn\@$$clusters{$cn}[2]\n";
        }
        else {
            print "$cn.0\@$$clusters{$cn}[2]\t\t$$clusters{$cn}[0]\t$$clusters{$cn}[1]\n";
        }
    }
}

exit 0;

#================================================================
