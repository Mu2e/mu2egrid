#!/usr/bin/perl -w
#
# A simple wrapper for jobsub_q to figure out what job clusters are still in the queue.
#
# A.Gaponenko, 2012, 2015
#
use strict;
use Getopt::Long;
use File::Basename;


use Class::Struct Mu2eClusterStats => { total=>'$', running=>'$', held=>'$', idle=>'$' };

sub Mu2eClusterStats::add {
    my ($self, $other) = @_;

    my %union;
    foreach my $i (keys %$self, keys %$other) {
        $union{$i}++
    }
    my @union = keys %union;

    foreach my $k (@union) {
        my $sum = ($self->{$k} // 0) + ($other->{$k}//0);
        $self->{$k} = $sum;
    }
}

#================================================================
sub jobinfo($) {
    my ($fields) = @_;
    my $code = $$fields[5];
    my %codeToName = ('H' => 'held', 'R' => 'running', 'I'=>'idle');
    my $state = $codeToName{$code} // 'unknown';
    my %keys = ('total'=>1, $state=>1);
    my $res = Mu2eClusterStats->new(%keys);
}
#================================================================
sub getUserClusters($$) {
    my ($username, $groupname) = @_;

    my @args;
    if($username ne '') {
        push @args, '--user', $username;
    }
    if($groupname ne '') {
        push @args, '--group', $groupname;
    }

    open OLDERR,     ">&", \*STDERR or die "Can't dup STDERR: $!\n";
    open STDERR, '>', '/dev/null' or die "Can't redirect STDERR: $!\n";
    my $ret = open(my $CQ, '-|', 'jobsub_q', @args);
    my $savedmsg = $!;
    open STDERR,     ">&", \*OLDERR or die "Can't restor STDERR: $!\n";
    die "Error opening jobsub_q pipe: $savedmsg\n" unless $ret;

    my %clusters;

    while(my $line = <$CQ>) {
        chomp($line);
        my @fields = split(' ', $line);
        if(($#fields > 5) && ($fields[1] eq $username)) {

            my $cn = $fields[0];
            $cn =~ s/\.\d*@/@/;

            my $current = jobinfo(\@fields);

            if(!defined($clusters{$cn})) {
                $clusters{$cn} = Mu2eClusterStats->new(total=>0, running=>0, held=>0, idle=>0);
            }
            $clusters{$cn}->add($current);
        }
    }

    close $CQ
        or die "Error when running jobsub_q.  Exit code ", $?>>8, ", signal ", 0xFF&$? ,".\n";

    return \%clusters;
}

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:

        $self [--brief] [--user=username] [--group=groupname]

will display a list of all active condor clusters for the user and job
count in each cluster.  If the '--brief' options is given, just cluster
IDs are printed.

EOF
;
}

#================================================================
my $user = `whoami`;
chomp $user;
my $group = '';
my %opt = (help => 0, brief => 0, user => \$user, group => \$group );
GetOptions(\%opt, "help", "brief", "user=s", "group=s")
    or die "\nError processing command line options.\n";

if($opt{'help'} or ($#ARGV >= 0)) {
    print usage();
}
else {
    my $brief = $opt{'brief'};

    my $clusters = getUserClusters($user, $group);

    if(!$brief) {
        print "Cluster  \t\t\t\tnjobs\trunning\tidle\theld\n";
    }

    foreach my $cn (sort(keys %$clusters)) {
        if($brief) {
            print "$cn\n";
        }
        else {
            print
                "$cn\t\t", $$clusters{$cn}->total,
                "\t", $$clusters{$cn}->running,
                "\t", $$clusters{$cn}->idle,
                "\t", $$clusters{$cn}->held,
                "\n";
        }
    }
}

exit 0;

#================================================================
