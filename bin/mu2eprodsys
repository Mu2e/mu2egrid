#!/usr/bin/perl -w
#
# A frontend script to submit mu2e framework jobs
#
# A.Gaponenko, 2012, 2015
#

use File::Basename;
use File::Path;
use File::Temp;
use Archive::Tar;
use Getopt::Long;
use POSIX qw(ceil);

use Data::Dumper; # for debugging

use lib dirname($0);
use mu2egrid;

my $submitter = `whoami`;
chomp($submitter);

my $default_error_delay = 30*60; # grid black hole node protection

my $defaultProductionWFTop = '/pnfs/mu2e/persistent/users';
my $defaultUserWFTop = '/pnfs/mu2e/scratch/users';

my %features = ( prestageIsSupported => 0, outstageIsSupported => 0);

my @extra_jobsub_args;

my $dsowner = $submitter;
$dsowner =~ s/^mu2epro/mu2e/;

my %opt =
    (
     'jobsub-arg' => \@extra_jobsub_args,
     'dsowner' => $dsowner,
     'xrootd' => 0,
     'transfer-all-files' => 0,
    );

@opt{keys %mu2egrid::commonOptDefaultsMu2e}  =  values %mu2egrid::commonOptDefaultsMu2e;
@opt{keys %mu2egrid::commonOptDefaultsJobsub}  =  values %mu2egrid::commonOptDefaultsJobsub;
$opt{'wftop'} = '';
$opt{'wfproject'} = 'default';


#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self {--setup=<cvmfs-script-to-source.sh>|--code=/pnfs/path/to/tar-file} \\
              --fcllist=<fcl-file-list> \\
              --dsconf=<output-dataset-version-string> \\
              [--dsowner=<name>] \\
              [--wftop=<directory>] \\
              [--wfproject=<name>] \\
              [--clustername=<name>] \\
              [--mu2ebintools-version=<string>] \\
              [--xrootd] \\
              [--transfer-all-files] \\
              [--error-delay=<int>] \\
EOF
        . mu2egrid::commonOptDoc1(%features) . <<EOF

    - Exactly one of --setup or --code must be specified.

      The --setup argument must point to the setup.sh script
      in an Offline build on /cvmfs.

      The --code option must point to a tarball in an ifdh-accessible
      area like /pnfs.  The tarball will be extracted on the worker
      node, and is expected to have a Code/setup.sh file, which will
      be sourced to setup a release of Offline.  Note that you will
      need sufficient disk space on the worker node to hold a copy of
      the original tarball plus its extracted content.   The copy will
      be deleted before the job is run, so that space can be reused
      by input or output data files.

    - The set of fcl files specified via --fcllist will be processed
      by Mu2e Offline, one fcl file per job.  Normally it should be a
      plain text file with one fcl file name per line.  The filenames
      must be absolute (start with the '/'). Fcl files for grid jobs
      should normally reside in /pnfs.

      Instead of a plain text list one can also provide a tar archive
      with fcl files.  The archive may be bzip2 or gzip compressed,
      and should normally be placed in /pnfs.  A grid job will be
      scheduled for each file in the archive that has a name ending in
      '.fcl'.  If the archive contains any other files (e.g. '.json'),
      they will be ignored.  There are no specific requirements on the
      directory structure of the archive; the files can be placed in
      an arbitrary directory tree.

    - The configuration field in the names of output files should be
      specified via --dsconf.

    - The --dsowner option specifies the username field in the names
      of output files.  The default is the username of the submitter.
      For the mu2epro user the default --dsowner is mu2e.

    - The --wftop and --wfproject options determine the location of
      output files in the "workflow" directory structure.
      Grid jobs will write their outputs under

      \$wftop/\$USER/workflow/\$wfproject/outstage

      where \$USER is the name of the submitter (here: "$submitter").
      By default \$wftop=$defaultProductionWFTop
      for --role=Production and $defaultUserWFTop otherwise.
      The default \$wfproject is "default".

    - The --clustername option can be used to alter the name of
      the cluster level outstage directory.  For example, with
      --clustername=foo the outstage directory will be named like
      1884300.foo (where 1884300 is the condor cluster number)

    - The --mu2ebintools-version option can be used to specify the
      version of the corresponding package to be used by the worker
      node process.  If a version is not specified on the command
      line, mu2eprodsys will rely on the mu2etools package to find a
      compatible mu2ebintools version.

    - The --xrootd option alters the way input art files are accessed
      by the worker node process.  By default all data files specified
      in the job fcl file are pre-staged to a local disk on the worker
      node using ifdh, and the job reads the local copies.  With the
      xrootd switch the files are not pre-staged.  Instead the job
      is started immediately and pointed to file URLs derived from
      the original pnfs file names using the substitution
      /pnfs/path => xroot://fndca1.fnal.gov/pnfs/fnal.gov/usr/path

    - The --transfer-all-files option requests to "ifdh cp" back
      all files left in the working directory after the job is complete.
      By default only *.art *.root *.json and the log file transferred.

    - The --error-delay options sets the delay, in seconds, before
      the worker node script will exit after a payload failure.
      This helps to reduce batch queue drain by broken grid nodes.
      The default value is $default_error_delay.

EOF
. mu2egrid::commonOptDoc2(%features)
    ;
}

#================================================================
sub checkFilenameComponent {
    my ($opt, $list) = @_;
    foreach my $a (@$list) {
        die "Error: parameter $a must be specified\n" unless defined $$opt{$a};
        my $val = $$opt{$a};
        die "Invalid value of parameter $a = '$val'"
            unless $val =~ /^\w[-\w]*$/;
    }
}

#================================================================
sub interpret_fcl_input {
    my ($fclin) = @_;

    my ($njobs, $fcllist, $fcltar);

    print "Testing if fcl inputs in $fclin are given as a tar archive.\n" if $opt{'verbose'};
    local $Archive::Tar::WARN = 0 unless $opt{'verbose'};

    my $tt = Archive::Tar->new($fclin);

    if (defined $tt) {
        print "$fclin is a tar file\n"  if $opt{'verbose'};

        $fcltar = $fclin;

        # Prepare a list of all fcl files in the tarball
        my @arr = grep { /\.fcl$/ } $tt->list_files();

        $njobs = 1 + $#arr;

        # the file will be deleted afer running jobsub_submit
        (my $tmph, $fcllist) = File::Temp::tempfile();
        print $tmph join("\n", @arr), "\n";
    }
    else {
        print "$fclin is NOT a tar file\n" if $opt{'verbose'};
        $fcllist = $fclin;
        $njobs = mu2egrid::validate_file_list($fcllist);
        $fcltar = '';
    }

    return ($njobs, $fcllist, $fcltar);
}

#================================================================

# Process command line opts.
GetOptions(\%opt,
    'setup=s',
    'code=s',
    'fcllist=s',
    'dsconf=s',
    'dsowner=s',
    'wftop=s',
    'wfproject=s',
    'clustername=s',
    'mu2ebintools-version=s',
    'error-delay=i',
    'xrootd',
    'transfer-all-files',
    grep {!/prestage-spec/ and !/outstage/} @mu2egrid::commonOptList)
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
exit 0;
}

print "Final set of options:\n", Dumper( \%opt ), "\n"
    if($opt{'verbose'});

# Check that all of the required args are present:
foreach my $k ('mu2e-setup', 'fcllist', 'dsconf', 'dsowner') {
    defined $opt{$k} or die "Error: --$k must be specified.  Try the --help option.\n";
}

# Do we use a custom tarball or a CVMFS release?
if(defined $opt{'setup'}) {
    die "Error: both --code and --setup are specified.  Choose one.\n" if defined $opt{'code'};
    $ENV{'MU2EGRID_USERSETUP'} = mu2egrid::find_file($opt{'setup'});
}
else {
    die "Error: at least one of --setup or --code should be specified.\n" unless defined $opt{'code'};
    $ENV{'MU2EGRID_USERSETUP'} = 'Code/setup.sh'; # relative path per the tar file convention
    $ENV{'MU2EGRID_CODE'} = mu2egrid::find_file($opt{'code'});
}

# Make sure components of Mu2e filenames are valid
checkFilenameComponent(\%opt, ['dsconf', 'dsowner']);

#----------------
# Decide what outstage to use, unless one is specified by user
if($opt{'wftop'} eq '') {
    if(defined($opt{'role'}) and ($opt{'role'} eq 'Production')) {
        $opt{'wftop'} = $defaultProductionWFTop;
    }
    else {
        $opt{'wftop'} = $defaultUserWFTop;
    }
}

my $wfoutstage = $opt{'wftop'} . '/' . $submitter . '/workflow/' . $opt{'wfproject'} . '/outstage';

File::Path::make_path( $wfoutstage, { verbose=>1 } ) # this Carps on errors
    unless $opt{'dry-run'};

print "Will use the outstage directory = $wfoutstage\n";

#----------------
# All file args are to be passed to the worker node script using full path names.

$ENV{'MU2EGRID_MU2ESETUP'} = mu2egrid::find_file($opt{'mu2e-setup'});

my $fclin = mu2egrid::find_file($opt{'fcllist'});

my ($njobs, $fcllist, $fcltar) = interpret_fcl_input($fclin);

$ENV{'MU2EGRID_INPUTLIST'} = basename($fcllist); # use jobsub_client's -f, the worker node only needs the basename
$ENV{'MU2EGRID_FCLTAR'} = $fcltar;

$ENV{'MU2EGRID_WFOUTSTAGE'} = $wfoutstage;

$ENV{'MU2EGRID_DSOWNER'} = $opt{'dsowner'};
$ENV{'MU2EGRID_CLUSTERNAME'} = $opt{'clustername'} // '';

$ENV{'MU2EGRID_DSCONF'} = $opt{'dsconf'};

$ENV{'MU2EGRID_TRANSFER_ALL'} = $opt{'transfer-all-files'};
$ENV{'MU2EGRID_XROOTD'} = $opt{'xrootd'};

#----------------------------------------------------------------
my @args;
for my $key (keys %mu2egrid::commonOptDefaultsJobsub) {
    if(defined $opt{$key}) {
        print "Adding jobsub_submit option: --$key $opt{$key}\n" if $opt{'verbose'};
        push @args, ("--$key", $opt{$key});
    }
}

push @args, ('-l', "priority=$opt{priority}");

push @args, @extra_jobsub_args;

# Export the EXPERIMENT variable for ifdh
push @args, ('-e', 'EXPERIMENT');

#----------------------------------------------------------------
# Figure out package versions to use on the worker node

# IFDH_VERSION in the environment is used by both jobsub and our worker node scripts.
# This is why we don't use the MU2EGRID_ prefix for this var.
$ENV{'IFDH_VERSION'} = $opt{'ifdh-version'} // $ENV{'IFDH_VERSION'} // mu2egrid::default_package_version($opt{'mu2e-setup'}, 'ifdhc', '');
print "Will use ifdh version $ENV{IFDH_VERSION}\n";

if(!defined $opt{'code'}) {
    $ENV{'MU2EGRID_MU2EBINTOOLS_VERSION'} = $opt{'mu2ebintools-version'} // mu2egrid::default_mu2ebintools_version($opt{'mu2e-setup'}, $opt{'setup'});
    print "Will use mu2ebintools version $ENV{MU2EGRID_MU2EBINTOOLS_VERSION}\n";
}
else {
    print "WARNING: Can not determine mu2ebintools version at submission time when --code is used.\n";
}

$ENV{'MU2EGRID_ERRORDELAY'} = $opt{'error-delay'} // ($njobs > 10 ?  $default_error_delay : 1);

$ENV{'MU2EGRID_IFDHEXTRAOPTS'} = $opt{'ifdh-options'} // '';

#----------------------------------------------------------------
while( (my $key, my $value) = each(%ENV) ) {
    if(($key =~ m/^MU2EGRID_\w+$/) or ($key eq 'IFDH_VERSION')) {
        # jobsub_client does not allow empty string as environment values
        if($value ne '') {
            push @args,  ('-e', $key);
            print "Using: $key => $ENV{$key}\n";
        }
}
}

push @args, ('-N', $njobs);

push @args, ( '-f', "dropbox://$fcllist" );

push @args, 'file://' . $mu2egrid::impldir . '/mu2eprodsys.sh';

print "Command:  $mu2egrid::jobsub @args\n";
if(!$opt{'dry-run'}) {
    print "Submitting....\n";
exec { $mu2egrid::jobsub } $mu2egrid::jobsub, @args
    or die "Error executing $mu2egrid::jobsub: $!";
}
else {
    print "Not submitting because --dry-run was requested.\n";
}

# Clean up temporary files
if($fcltar ne '') {
    print "Cleaning up: removing temporary fcl list file $fcllist\n"
        if $opt{'verbose'};

    unlink $fcllist;
}

#================================================================
