#!/usr/bin/perl -w
#
# A frontend script to submit mu2e G4beamline jobs to Fermilab grid.
#
# A.Gaponenko, 2012
#
use File::Basename;
use Getopt::Long;
use POSIX qw(ceil);

use Data::Dumper;

use lib dirname($0);
use mu2egrid;

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self --in=<file> \\
              [--tar=<tarfile>] \\
              --g4bl-version=<version> \\
              --njobs=<M> \\
              --events-per-job=<N> \\
              [--jobname=<name>] \\
              [--g4bl-add-args=<string>] \\
EOF
. mu2egrid::commonOptDoc1() . <<EOF

    - The --in argument specifies the name of the main G4beamline
      input file.

    - The --tar argument is optional.  This must be a tarball of
      all configuration files included from the --in file
      (but should not contain the --in file).

    - The jobname argument defines the name of the top level output
      directory.  If this parameter is not specified, a name will be
      derived from the --in file name.

    - All the files mentioned on the submission command line must be
      left intact until all the jobs finish.

EOF
. mu2egrid::commonOptDoc2()
;
}

#================================================================
my @extra_jobsub_args;
my @files_to_transfer;

my %opt = (
    'tar' => '',
    'jobsub-arg' => \@extra_jobsub_args,
    );

@opt{keys %mu2egrid::commonOptDefaultsMu2e}  =  values %mu2egrid::commonOptDefaultsMu2e;
@opt{keys %mu2egrid::commonOptDefaultsJobsub}  =  values %mu2egrid::commonOptDefaultsJobsub;

# Process command line opts.
GetOptions(\%opt,
    "in=s",
    "tar=s",
    "g4bl-version=s",
    "jobname=s",
    "g4bl-add-args=s",
    "njobs=i",
    "events-per-job=i",
    @mu2egrid::commonOptList)
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

print "Final set of options:\n", Dumper( \%opt ), "\n"
    if($opt{'verbose'});

# Check that all of the required args are present:
foreach my $k ('in', 'njobs', 'g4bl-version') {
    defined $opt{$k} or die "Error: --$k must be specified.  Try the --help option.\n";
}

# All file args are to be passed to the worker node script using full path names.
my $in = mu2egrid::find_file($opt{'in'});
my $tar = $opt{'tar'};
$tar = mu2egrid::find_file($tar) unless $tar eq '';

my $mu2esetup = mu2egrid::find_file($opt{'mu2e-setup'});
my $outstage = mu2egrid::find_directory($opt{'outstage'});

mu2egrid::assert_known_outstage($outstage);

my $njobs = $opt{'njobs'};
my $test_queue = $opt{'test-queue'};
if($test_queue && ($njobs > 1)) {
    print "WARNING: trying to run more than one job while requesting --test-queue\n";
}

my $jobname;
if(defined $opt{'jobname'}) {
    $jobname = $opt{'jobname'};
}
else {
    $jobname = basename($in, ('.in',) );
}

$ENV{'MU2EGRID_MU2ESETUP'} = $mu2esetup;
$ENV{'MU2EGRID_OUTDIRFMT'} = "$jobname.%d/%05d";
$ENV{'MU2EGRID_OUTSTAGE'} = $outstage;
$ENV{'MU2EGRID_NCLUSTERJOBS'} = $njobs;
$ENV{'MU2EGRID_G4BLVERSION'} = $opt{'g4bl-version'};
$ENV{'MU2EGRID_G4BL_ADD_ARGS'} = $opt{'g4bl-add-args'};

$ENV{'MU2EGRID_MASTERIN'} = basename($in);
push @files_to_transfer, $in;

$ENV{'MU2EGRID_TAR'} = '';
if($tar) {
    $ENV{'MU2EGRID_TAR'} = basename($tar);
    push @files_to_transfer, $tar;
}

my $whoami = `whoami`;
chomp($whoami);
$ENV{'MU2EGRID_SUBMITTER'} = $whoami;

#----------------
# Handle the --prestage-spec options
if(defined($opt{'prestage-spec'})) {
    $prestage = mu2egrid::find_file($opt{'prestage-spec'});
    mu2egrid::validate_prestage_spec($prestage);
    $ENV{'MU2EGRID_PRESTAGE'} = basename($prestage);
    push @files_to_transfer, $prestage;
}

if(!defined($opt{'events-per-job'})) {
    die "Error: --events-per-job must be specified.";
}
$ENV{'MU2EGRID_EVENTS_PER_JOB'} = $opt{'events-per-job'};

#----------------
my @args;
for my $key (keys %mu2egrid::commonOptDefaultsJobsub) {
    if(defined $opt{$key}) {
        print "Adding jobsub_submit option: --$key $opt{$key}\n" if $opt{'verbose'};
        push @args, ("--$key", $opt{$key});
    }
}

push @args, ('-l', "priority=$opt{priority}");

push @args, @extra_jobsub_args;

# IFDH_VERSION in the environment is used by both jobsub and our worker node scripts.
# This is why we don't use the MU2EGRID_ prefix for this var.
$ENV{'IFDH_VERSION'} = $opt{'ifdh-version'} // $ENV{'IFDH_VERSION'} // mu2egrid::default_package_version($opt{'mu2e-setup'}, 'ifdhc', '');
print "Will use ifdh version $ENV{IFDH_VERSION}\n";

# Export the EXPERIMENT variable for ifdh
push @args, ('-e', 'EXPERIMENT='.$ENV{'EXPERIMENT'});

if($tar) {
    push @args, ('-f', 'dropbox://' . $tar);
}
if($test_queue) {
    push @args, '--test_queue';
}

while( (my $key, my $value) = each(%ENV) ) {
    if(($key =~ m/^MU2EGRID_\w+$/) or ($key eq 'IFDH_VERSION')) {
        # jobsub_client does not allow empty string as environment values
        if(defined $value and $value ne '') {
            push @args,  ('-e', $key . '=' . $ENV{$key});
            print "Using: $key => $ENV{$key}\n" if $opt{'verbose'};
        }
    }
}

my %filecheck;
foreach my $f (@files_to_transfer) {
    push @args, ('-f', 'dropbox://' . $f);
    my $bn = basename($f);
    if(defined($filecheck{$f})) {
        die "Error: duplicate file name $f on the transfer list\n";
    }
    $filecheck{$f} = 1;
}

push @args, ('-N', $njobs);

push @args, 'file://' . $mu2egrid::impldir . '/copyback.sh';
push @args, $mu2egrid::impldir . '/mu2eg4bl.sh';

print "Command:  $mu2egrid::jobsub @args\n";
if(!$opt{'dry-run'}) {
    print "Submitting....\n";
    exec { $mu2egrid::jobsub } $mu2egrid::jobsub, @args
        or die "Error executing $mu2egrid::jobsub: $!";
}
else {
    print "Not submitting because --dry-run was requested.\n";
}
#================================================================
