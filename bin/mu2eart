#!/usr/bin/perl -w
#
# A frontend script to submit mu2e framework jobs to Fermilab grid.
#
# A.Gaponenko, 2012
#
use File::Basename;
use Getopt::Long;
use Cwd 'abs_path';
use POSIX qw(ceil);

use lib dirname($0);
use mu2egrid;

my $workerscript = abs_path(dirname($0) . '/impl/mu2eart.sh');

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage: 
	$self --setup=<script-to-source.sh> \\
	      --fcl=<file> \\
	      --njobs=<M> \\
	      {--inputs=<filelist>|--events-per-job=<N> [--run-number=<R>]} \\
	      [--jobname=<name>] \\
	      [--outstage=<dir>] \\
	      [--userscript=<script>] \\
	      [--mu2e-setup=<setupmu2e-art.sh>] \\
	      [--test-queue] \\
	      [--dry-run] \\
	      [--verbose]

Where [] denote optional settings, and {alternative1|alternative2}
constructs denote mutually exclusive alternatives.

Notes:

    - All option names may be abbreviates as long as this is unambiguous.
      (For example, '--in' and '--inputs' mean the same.)
    
    - The --setup argument must point to the setup.sh script in a user
      Offline area.  The --mu2e-setup arg is optional, by default
      the current official mu2e release is used.

    - The jobname argument defines the name of the top level output
      directory.  If this parameter is not specified, a name will be
      derived from the fcl file name.

    - The optional --userscript script receives the name of the
      generated fcl file as the first command line argument, the
      sequential process number (0 to njobs-1) as the second argument,
      and the total number of jobs in this cluster as the third.  The
      script is invoked after the process-specific fcl file is
      generated and before the mu2e command is run.  The script may
      modify the fcl file and/or do any other adjustments to the job.
      The process is aborted unless the script exits with zero status
      code.

    - The --test-queue option submits a test job.  The job will run
      with highest possible priority, but you can only have one such
      job in the queue at a time.

    - Outstage should be one of the following registered locations: 

           @mu2egrid::knownOutstage

      by default $mu2egrid::mu2eDefaultOutstage  is used.

    - Once grid jobs are submitted the software libraries pointed to
      by the setup script, all configuration files, and the input
      filelist must be left intact until all the jobs finish.  
EOF
;
}

#================================================================
my %opt = ('mu2e-setup' => '/grid/fermiapp/products/mu2e/setupmu2e-art.sh',
	   'outstage' => $mu2egrid::mu2eDefaultOutstage,
	   help => 0, verbose => 0, 'test-queue' => 0, 'dry-run' => 0);


# Process command line opts.
GetOptions(\%opt, 
	   "help",
	   "verbose",
	   "setup=s",
	   "mu2e-setup=s",
	   "fcl=s",
	   "userscript=s",
	   "jobname=s",
	   "outstage=s",
	   "njobs=i",
	   "inputs=s",
	   "events-per-job=i",
	   "run-number=i",
	   "test-queue",
	   "dry-run",
	   ) 
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

# Check that all of the required args are present:
foreach my $k ('setup', 'mu2e-setup', 'fcl', 'outstage', 'njobs') {
    defined $opt{$k} or die "Error: --$k must be specified.  Try the --help option.\n";
}

# All file args are to be passed to the worker node script using full path names.
my $setup = find_file($opt{'setup'});
my $mu2esetup = find_file($opt{'mu2e-setup'});
my $fcl = find_file($opt{'fcl'});
my $outstage = find_file($opt{'outstage'});

assert_known_outstage($outstage);

my $njobs = $opt{'njobs'};
my $test_queue = $opt{'test-queue'};
if($test_queue && ($njobs > 1)) {
    print "WARNING: trying to run more than one job while requesting --test-queue\n";
}

my $jobname;
if(defined $opt{'jobname'}) {
    $jobname = $opt{'jobname'};
}
else {
    $jobname = basename($fcl, ('.fcl',) );
}

$ENV{'MU2EGRID_USERSETUP'} = $setup;
$ENV{'MU2EGRID_MU2ESETUP'} = $mu2esetup;
$ENV{'MU2EGRID_MASTERFHICL'} = $fcl;
$ENV{'MU2EGRID_JOBNAME'} = $jobname;
$ENV{'MU2EGRID_OUTSTAGE'} = $outstage;
$ENV{'MU2EGRID_NCLUSTERJOBS'} = $njobs;

my $whoami = `whoami`;
chomp($whoami);
$ENV{'MU2EGRID_SUBMITTER'} = $whoami;

# Either --inputs or --events-per-job is required.   The --run-number option is only combinable with the latter.
if(defined $opt{'inputs'}) {
    if(defined($opt{'events-per-job'})) {
	die "Arguments --inputs and --events-per-job are mutually exclusive.";
    }

    if(defined($opt{'run-number'})) {
	die "Arguments --inputs and --run-number are mutually exclusive.";
    }

    my $inputs = find_file($opt{'inputs'});

    $ENV{'MU2EGRID_INPUTLIST'} = $inputs;
    my $nlines =  `cat $inputs | wc -l`;
    chomp($nlines);
    print "nlines = $nlines in file $inputs\n" if $opt{'verbose'};

    if($nlines < $njobs) {
	die "Error too many requested jobs = $njobs.  The input file list has only $nlines lines: $inputs\n";
    }
    $ENV{'MU2EGRID_CHUNKSIZE'} = ceil($nlines/$njobs);

}
else {
    if(!defined($opt{'events-per-job'})) {
	die "Either --inputs or --events-per-job must be specified.";
    }

    $ENV{'MU2EGRID_EVENTS_PER_JOB'} = $opt{'events-per-job'};

    if(defined($opt{'run-number'})) {
	$ENV{'MU2EGRID_RUN_NUMBER'} = $opt{'run-number'};
    }
}

#----------------
# Handle the --userscript options
my $userscript = '';
if(defined($opt{'userscript'})) {
    $userscript = find_file($opt{'userscript'});
    die "Error: file \"$userscript\" is not executable\n"
	unless -x $userscript;
}
$ENV{'MU2EGRID_USERSCRIPT'} = $userscript;

#----------------
my @args = ('--grid', '--mail_never', '--opportunistic', '-N', $njobs);
if($test_queue) {
    push @args, '--test_queue';
}

while( (my $key, my $value) = each(%ENV) ) {
    if($key =~ m/^MU2EGRID_\w+$/) {
	#print "Using env $key => $value\n";
	push @args,  ('-e', $key);
	print "Using: $key => $ENV{$key}\n" if $opt{'verbose'};
    }
}

push @args, $workerscript;

print "Command:  $mu2egrid::jobsub @args\n";
if(!$opt{'dry-run'}) {
    print "Submitting....\n";
    exec { $mu2egrid::jobsub } $mu2egrid::jobsub, @args
	or die "Error executing $mu2egrid::jobsub: $!";
}
else {
    print "Not submitting because --dry-run was requested.\n";
}
#================================================================
