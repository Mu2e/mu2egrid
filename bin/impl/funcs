# -*-Shell-script-*-
#
# Common functions for worker node scripts.
#
# Andrei Gaponenko, 2012
#
#
#================================================================
CPN_DIR=/grid/fermiapp/common/tools
#================================================================
SeedServiceMaxEngines=20
generateSeed() {
    # art's RandomNumberGenerator_service restrict seeds to
    # not exceed 900000000.   Not clear if zero seed is OK
    # so we'll use a non-negative number up to the max.
    # Should leave space for SeedService to increment, thus -20.
    seed=0
    maxseed=$((900000001 - $SeedServiceMaxEngines))
    while [ "$seed" -le 0 ]; do 
	seed=$(( $(od --format u4 --read-bytes 4 /dev/urandom | head -1| awk '{print $2}') % maxseed ))
    done
    echo $seed
}

#================================================================
# This cuts a chunk of inputs for this job from the master input file list.
# The resulting list gives "remote" files names that are to be staged in.
createInputFileList() {
    masterlist=${1:?createInputFileList: masterlist arg missing}
    chunksize=${2:?createInputFileList: chunksize arg missing}
    process=${3:?createInputFileList: process arg missing}

    firstline=$((1 + $chunksize * $process))
    
    mylist="mu2eRemoteInputFiles.txt"
    tail --lines=+"$firstline" "$masterlist" | head --lines="$chunksize" > "$mylist"
    echo "$mylist"
}

#================================================================
# This function creates a "prestage specification" file from
# a list of remote input event files.
createPrestageSpec() {
    remotelist=${1:?createPrestageSpec: remotelist arg missing}
    specfile="events_prestage.spec"

    cat $remotelist | while read rfn; do
	lfn="data/$(echo $rfn|sed -e 's|/|-|g')"
	echo $rfn $lfn >> $specfile
    done

    echo "$specfile"
}

#================================================================
# This function creates a list of local files from a prestage
# specification file.
extractLocalList() {
    specfile=${1:?extractLocalList: specfile arg missing}
    locallist="mu2eLocalInputFiles.txt"
    awk '{print $2}' $specfile > $locallist
    echo "$locallist"
}

#================================================================
# This function takes a list of remote files, stages them in,
# prepares a list of local files, and returns the name of the local filelist.
stageIn() {

    ret=0

    declare -a specs
    for f in "$@"; do
	if [ -n "$f" ]; then
	    specs=("${specs[@]}" $f)
	fi
    done
    
    if [ "${#specs[@]}" -gt 0 ]; then

	tstart=$(date +%s)

	$CPN_DIR/lock

	t1=$(date +%s)
	echo "$(date) # Time to get stage-in lock: $((t1-tstart)) seconds"

	for spec in "${specs[@]}"; do

	    cat "$spec" | while read line; do
		rfn=$(echo $line | awk '{print $1}')
		lfn=$(echo $line | awk '{print $2}')

		echo "$(date) # Staging in: $rfn ==> $lfn"
		
		if ! { mkdir -p $(dirname $lfn) && cp $rfn $lfn; } ; then
		    ret=1;
		    break 2
		fi

	    done
	    
	done

	$CPN_DIR/lock free
    
	t2=$(date +%s)
	echo "$(date) # Copy time: $((t2-t1)), total stage-in time: $((t2-tstart)) seconds"
    fi

    return $ret
}

#================================================================
printinfo() {
    echo Starting on host `uname -a` on `date`
    echo running as user `whoami`
    echo "current work dir is $(/bin/pwd)"
    echo OS version `cat /etc/redhat-release`
    echo "job arguments: $@"
    echo "The environment is:"
    /usr/bin/printenv
    echo "================================================================"
    echo "Visible disk space:"
    df -P
    echo "================================================================"
    echo "TMPDIR: ls -al"
    ls -al "$TMPDIR"
    echo "TMPDIR: df -h"
    df -h "$TMPDIR"
}
#================================================================
createOutStage() {
    # Copy arguments into meaningful names.
    outstagebase=${1:?createOutStage: outstagebase missing}
    user=${2:?createOutStage: user missing}
    jobname=${3:?createOutStage: jobname missing}
    cluster=${4:?createOutStage: cluster missing}
    process=${5:?createOutStage: process missing}

    outtop="${outstagebase}/$user/${jobname}.${cluster}"
    outstage="${outtop}/$(printf '%05d' $process)"

    # There are cases when a job fails after creating the outstage
    # directory then automatically restarted by condor.  We don't want
    # to loose the output from the restarted job.  It is also good to
    # preserve whatever was transmitted by the first instance for a
    # post-mortem analysis.  Just rename a pre-existing directory.
    # There should be no race condition as the previous instance of
    # this process should be dead before a new one is started.

    if [ -d "$outstage" ]; then
	/bin/mv "$outstage" $(mktemp -u "$outstage".XXX)
    fi

    mkdir -p --mode 0775 "${outstage}" && echo "${outstage}"
}
#================================================================
# Ignores directories and other non-plain files
selectFiles() {
    for i in "$@"; do
	test -f "$i" && echo "$i"
    done
}
#================================================================
filterOutProxy() {
    for i in "$@"; do
	case "$i" in
	    *.proxy)
            # Don't expose security sensitive info
		true;;
	    *) 
		echo "$i";;
	esac
    done
}
#================================================================
createManifest() {
    echo '# algorithm: sha256sum' > manifest
    sha256sum "$@" >> manifest
    sc="$(sha256sum < manifest)"
    echo "# selfcheck: $sc" >> manifest
    echo manifest
}
#================================================================
transferOutFiles() {
    OUTDIR="${1:?transferOutFiles: OUTDIR arg missing}"
    shift

    GFTPSERVER=${MU2EGRID_GFTPSERVER:-gsiftp://if-gridftp-mu2e.fnal.gov}

    MANIFEST=$(createManifest "$@")

    $CPN_DIR/lock 

    for f in "$MANIFEST" "$@"; do
	CMD="${GLOBUS_LOCATION}/bin/globus-url-copy -dbg -vb  file://${WORKDIR}/$f ${GFTPSERVER}//${OUTDIR}/"
	echo "about to do gridftp, the command is $CMD"
	$CMD
    done

    $CPN_DIR/lock free
}
#================================================================
