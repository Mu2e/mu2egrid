#!/usr/bin/perl -w
#
# A frontend script to submit mu2e MARS jobs to Fermilab grid.
#
# A.Gaponenko, 2012
#
use File::Basename;
use Getopt::Long;
use Cwd 'abs_path';
use POSIX qw(ceil);

use lib dirname($0);
use mu2egrid;

my $workerscript = $mu2egrid::impldir . '/mu2emars.sh';

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage: 
	$self --executable program \\
	--input MARSBASE.INP \\
	--njobs=<M> \\
	[--outdirfmt="%d/run_%03d"] \\
	[--outstage=dir] \\
        [--prestage-spec=<specfile>] \\
	[--setup=<script-to-source.sh>] \\
        [--test-queue] \\
	[--no-opportunistic] \\
	[--no-group-check] \\
        [--jobsub-arg=string1] [--jobsub-arg=string2] [...] \\
	[--dry-run] \\
	[--verbose] \\
	[--help]

Notes:

    - The outdirfmt argument defines the name of the output directory.
      It is specified as the usual printf format string that can
      use up to two integers: the cluster number and the process number.

    - The --prestage-spec option allows to specify a list of extra
      files that should be prestaged to the worker node.  Each
      line in the specification file has the format:

      /file/name/on/bluarc   relative/file/name/on/worker/node

      that is, source and target file names separated by any amount of
      white space.  The target file name is relative to the working
      directory.  It must contain a slash '/' and must not start with
      a slash. Leading and trailing white spaces are ignored. The
      total available disk space for all inputs and outputs on a
      worker node is usually 40 GB.

    - A bash script given by the --setup option will be sourced on the
      worker node before running the job.  It can, for example, setup
      environment variables as needed.

    - The --test-queue option submits a test job.  The job will run
      with highest possible priority, but you can only have one such
      job in the queue at a time.

    - By default the submitted jobs will use any available job slots.
      The --no-opportunistic options requests to run only on the
      dedicated slots.

    - The script check the GROUP environment variable and refuse
      submittion if it looks wrong for MARS jobs.  The
      --no-group-check option allows to override this test.

    - Once grid jobs are sumbitted the software libraries pointed to
      by the setup script, all configuration files, and the input
      filelist must be left intact until all the jobs finish.  

EOF
;
}

#================================================================
my @extra_jobsub_args;

my %opt = ('outstage' => '/grid/data/marsmu2e/outstage',
	   'outdirfmt' => '%d/run_%03d',
	   'help' => 0, 
	   'setup' => '',
	   'jobsub-arg' => \@extra_jobsub_args,
	   'test-queue' => 0, 'no-opportunistic' => 0,
	   'no-group-check' => 0,
	   'verbose' => 0, 'dry-run' => 0);

# Process command line opts.
GetOptions(\%opt, 
	   "help",
	   "verbose",
	   "executable=s",
	   "input=s",
	   "outdirfmt=s",
	   "outstage=s",
	   "prestage-spec=s",
	   "njobs=i",
	   "setup=s",
	   "jobsub-arg=s@",
	   "test-queue",
	   "no-opportunistic",
	   "no-group-check",
	   "dry-run",
	   ) 
    or die "\nError processing command line options.\n";

# Export the EXPERIMENT variable for ifdh
push @extra_jobsub_args, ('-e', 'EXPERIMENT');

if($opt{'help'}) {
    print usage();
    exit 0;
}

# Check that all of the required args are present:
foreach my $k ('executable', 'input', 'outstage', 'njobs') {
    defined $opt{$k} or die "Error: --$k must be specified.  Try the --help option.\n";
}

# All file args are to be passed to the worker node script using full path names.
my $executable = find_file($opt{'executable'});
my $input = find_file($opt{'input'});
my $outstage = find_file($opt{'outstage'});
assert_known_outstage($outstage);

my $njobs = $opt{'njobs'};

my $setup = '';
if(defined $opt{'setup'}) {
    $setup = find_file($opt{'setup'});
}

my $test_queue = $opt{'test-queue'};
if($test_queue && ($njobs > 1)) {
    print "WARNING: trying to run more than one job while requesting --test-queue\n";
}

$ENV{'MU2EGRID_EXECUTABLE'} = $executable;
$ENV{'MU2EGRID_MASTERINPUT'} = $input;
$ENV{'MU2EGRID_TOPDIR'} = abs_path('.');
$ENV{'MU2EGRID_OUTDIRFMT'} = $opt{'outdirfmt'};
$ENV{'MU2EGRID_OUTSTAGE'} = $outstage;
$ENV{'MU2EGRID_GFTPSERVER'} = "gsiftp://if-gridftp-marsmu2e.fnal.gov";
$ENV{'MU2EGRID_SETUP'} = $setup;


my $whoami = `whoami`;
chomp($whoami);
$ENV{'MU2EGRID_SUBMITTER'} = $whoami;

#----------------
# Handle the --prestage-spec options
my $prestage = '';
if(defined($opt{'prestage-spec'})) {
    $prestage = find_file($opt{'prestage-spec'});
    validate_prestage_spec($prestage);
}
$ENV{'MU2EGRID_PRESTAGE'} = $prestage;

#----------------
##my @args = ('--grid', '--mail_never', '-N', $njobs, '-T', '-L', '/mu2e/data/marsmu2e/users/condor-tmp/vspron/ccc.log');
my @args = ('--grid', '--mail_never', '-N', $njobs);
if($test_queue) {
    push @args, '--test_queue';
}
if(!$opt{'no-opportunistic'}) {
    push @args, '--opportunistic';
}

while( (my $key, my $value) = each(%ENV) ) {
    if($key =~ m/^MU2EGRID_\w+$/) {
	push @args,  ('-e', $key);
	print "Using: $key => $ENV{$key}\n" if $opt{'verbose'};
    }
}

push @args, @extra_jobsub_args;
push @args, $workerscript;

print "Command:  $mu2egrid::jobsub @args\n";

if(!$opt{'no-group-check'}) {
    die "\nError: environment variable GROUP=$ENV{GROUP} looks wrong for MARS jobs.  Use the --no-group-check option to submit anyway.\n"
	unless $ENV{'GROUP'} =~ m/mars/i;
}

if(!$opt{'dry-run'}) {
    print "Submitting....\n";
    exec { $mu2egrid::jobsub } $mu2egrid::jobsub, @args
	or die "Error executing $mu2egrid::jobsub: $!";
}
else {
    print "Not submitting because --dry-run was requested.\n";
}

#================================================================
