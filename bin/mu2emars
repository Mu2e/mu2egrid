#!/usr/bin/perl -w
#
# A frontend script to submit mu2e MARS jobs to Fermilab grid.
#
# A.Gaponenko, 2012
#
use File::Basename;
use Getopt::Long;
use Cwd 'abs_path';
use POSIX qw(ceil);
use Data::Dumper;

use lib dirname($0);
use mu2egrid;

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage: 
	$self --executable program \\
	--input MARSBASE.INP \\
	--njobs=<M> \\
	[--outdirfmt="%d/run_%03d"] \\
	[--setup=<script-to-source.sh>] \\
	[--no-group-check] \\
EOF
. mu2egrid::commonOptDoc1() . <<EOF

    - The outdirfmt argument defines the name of the output directory.
      It is specified as the usual printf format string that can
      use up to two integers: the cluster number and the process number.

    - A bash script given by the --setup option will be sourced on the
      worker node before running the job.  It can, for example, setup
      environment variables as needed.

    - The script check the GROUP environment variable and refuse
      submittion if it looks wrong for MARS jobs.  The
      --no-group-check option allows to override this test.

    - Once grid jobs are sumbitted the software libraries pointed to
      by the setup script, all configuration files, and the input
      filelist must be left intact until all the jobs finish.  

EOF
. mu2egrid::commonOptDoc2()
;
}

#================================================================
my @extra_jobsub_args;
my @files_to_transfer;

my %opt = (
    'outdirfmt' => '%d/run_%03d',
    'setup' => '',
    'no-group-check' => 0,
    );

@opt{keys %mu2egrid::commonOptDefaults}  =  values %mu2egrid::commonOptDefaults;

# Override the mu2egrid.pm default
$opt{'outstage'} = '/grid/data/marsmu2e/outstage';

# Process command line opts.
GetOptions(\%opt, 
    "executable=s",
    "input=s",
    "outdirfmt=s",
    "njobs=i",
    "setup=s",
    "no-group-check",
    @mu2egrid::commonOptList) 
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

# Export the EXPERIMENT variable for ifdh
push @extra_jobsub_args, ('-e', 'EXPERIMENT');

# Check that all of the required args are present:
foreach my $k ('executable', 'input', 'outstage', 'njobs') {
    defined $opt{$k} or die "Error: --$k must be specified.  Try the --help option.\n";
}

# All file args are to be passed to the worker node script using full path names.
my $executable = mu2egrid::find_file($opt{'executable'});
my $input = mu2egrid::find_file($opt{'input'});
my $mu2esetup = mu2egrid::find_file($opt{'mu2e-setup'});
my $outstage = mu2egrid::find_file($opt{'outstage'});
mu2egrid::assert_known_outstage($outstage);

my $njobs = $opt{'njobs'};

my $setup = '';
if(defined $opt{'setup'}) {
    $setup = mu2egrid::find_file($opt{'setup'});
}

my $test_queue = $opt{'test-queue'};
if($test_queue && ($njobs > 1)) {
    print "WARNING: trying to run more than one job while requesting --test-queue\n";
}

$ENV{'MU2EGRID_EXECUTABLE'} = $executable;
$ENV{'MU2EGRID_MASTERINPUT'} = $input;
$ENV{'MU2EGRID_TOPDIR'} = abs_path('.');
$ENV{'MU2EGRID_OUTDIRFMT'} = $opt{'outdirfmt'};
$ENV{'MU2EGRID_MU2ESETUP'} = $mu2esetup;
$ENV{'MU2EGRID_OUTSTAGE'} = $outstage;
$ENV{'MU2EGRID_SETUP'} = $setup;


my $whoami = `whoami`;
chomp($whoami);
$ENV{'MU2EGRID_SUBMITTER'} = $whoami;

#----------------
# Handle the --prestage-spec options
if(defined($opt{'prestage-spec'})) {
    $prestage = mu2egrid::find_file($opt{'prestage-spec'});
    mu2egrid::validate_prestage_spec($prestage);
    $ENV{'MU2EGRID_PRESTAGE'} = basename($prestage);
    push @files_to_transfer, $prestage;
}

#----------------
my @args;

push @args, ('--group', $opt{'group'});
if(defined($opt{'role'})) {
    push @args, ('--role', $opt{'role'});
}

push @args, ('--jobsub-server', $opt{'jobsub-server'});
push @args, ('--disk', $opt{'disk'});
push @args, ('--memory', $opt{'memory'});
push @args, ('--OS', $opt{'OS'});
push @args, ('--resource-provides', $opt{'resource-provides'});
push @args, @extra_jobsub_args;

# IFDH_VERSION is interpreded by both jobsub and our worker node scripts
if(defined($opt{'ifdh-version'}) and ($opt{'ifdh-version'} ne '')) {
    $ENV{'IFDH_VERSION'} = $opt{'ifdh-version'};
}

# Export the EXPERIMENT variable for ifdh
push @args, ('-e', 'EXPERIMENT');

if($test_queue) {
    push @args, '--test_queue';
}

while( (my $key, my $value) = each(%ENV) ) {
    if(($key =~ m/^MU2EGRID_\w+$/) or ($key eq 'IFDH_VERSION')) {
	if($value ne '') {
	    push @args,  ('-e', $key);
	    print "Using: $key => $ENV{$key}\n" if $opt{'verbose'};
	}
    }
}

my %filecheck;
foreach my $f (@files_to_transfer) {
    push @args, ('-f', $f);
    my $bn = basename($f);
    if(defined($filecheck{$f})) {
        die "Error: duplicate file name $f on the transfer list\n";
    }
    $filecheck{$f} = 1;
}

push @args, ('-N', $njobs);

push @args, 'file://' . $mu2egrid::impldir . '/copyback.sh';
push @args, $mu2egrid::impldir . '/mu2emars.sh';

print "Command:  $mu2egrid::jobsub @args\n";
if(!$opt{'no-group-check'}) {
    die "\nError: environment variable GROUP=$ENV{GROUP} looks wrong for MARS jobs.  Use the --no-group-check option to submit anyway.\n"
	unless $ENV{'GROUP'} =~ m/mars/i;
}
if(!$opt{'dry-run'}) {
    print "Submitting....\n";
exec { $mu2egrid::jobsub } $mu2egrid::jobsub, @args
    or die "Error executing $mu2egrid::jobsub: $!";
}
else {
    print "Not submitting because --dry-run was requested.\n";
}

#================================================================
